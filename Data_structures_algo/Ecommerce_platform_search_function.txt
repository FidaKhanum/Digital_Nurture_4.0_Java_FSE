1.	Understand Asymptotic Notation:

Q)	Explain Big O notation and how it helps in analyzing algorithms.
Q)	Describe the best, average, and worst-case scenarios for search operations.	
Ans: Big O Notation
     Big O notation is used to describe the time and space complexity of algorithms. It expresses how the runtime or memory usage of an algorithm grows as the size of the input increases.
     It helps compare the efficiency of different algorithms.
     Focuses on the worst-case performance, which is important for large-scale applications like e-commerce platforms.
     Best, Average, and Worst-Case Scenarios
     Best Case (Ω - Omega): The input takes the least amount of time (e.g., the searched item is at the beginning).
     Average Case (Θ - Theta): Average time taken over all inputs.
     Worst Case (O - Big O): The input takes the most time (e.g., the item is not present or is at the end).
     For searching algorithms:
      In Linear Search:
      			Best case: O(1)
      			Average case: O(n)
			    Worst case: O(n)
      In Binary Search:
			    Best case: O(1)
		        Average case: O(log n)
		        Worst case: O(log n)
		        
Q)	Compare the time complexity of linear and binary search algorithms.
Q)	Discuss which algorithm is more suitable for your platform and why.		        
Ans:Time Complexity Comparison
       Linear Search:
       Time complexity is O(n)
       Best used when the data is small or not sorted
       Binary Search:
       Time complexity is O(log n)
       Best used when the data is large and sorted
       
     For an e-commerce platform where:
	   Speed and performance are critical,
	   Data is usually large and can be kept sorted,
	   Binary search is more suitable because:
	   It is faster (O(log n)) and scales better with large datasets.
	   If the product list is maintained in sorted order (which is common in databases), binary search will be efficient and reliable.
